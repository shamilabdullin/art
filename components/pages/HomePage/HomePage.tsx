// Components
import { Collage } from '@/components/Collage'
import { PageController } from '../../PageController'
import { SearchBar } from '../../SearchBar'
import { Loading } from '@/components/Loading'
import { TagContainer } from '@/components/tags/TagContainer'

// Stores, utils, libs
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { PaintingModel, PaintingQueryModel } from '@/types/Paintings'
import { paintingsApi } from '@/api/paintings'
import { useQueryStore } from '@/stateManagement/queryStore'
import { useBoolean } from '@/hooks/useBoolean'
import { useTagStore } from '@/stateManagement/tagStore'

// CSS
import styles from './Home.module.sass'

const queryPainting: PaintingQueryModel = {
  api_link: '',
  api_model: '',
  id: '444',
  is_boosted: false,
  thumbnail: null,
  timestamp: '',
  title: '',
  _score: 0,
}

export default function HomePage(): JSX.Element {
  const [fullPaintings, setFullPaintings] = useState<PaintingModel[]>([])
  const [currentPage, setCurrentPage] = useState('1')
  const { value: isLoading, setFalse: setFalseLoading, setTrue: setTrueLoading } = useBoolean(false)

  const [shortPaintings, setShortPaintings] = useState([queryPainting])
  const [totalPages, setTotalPages] = useState('1')

  const query = useQueryStore((state) => state.query)
  const setQuery = useQueryStore((state) => state.setQuery)

  const isQuerySend = useQueryStore((state) => state.isSend)
  const setIsQuerySend = useQueryStore((state) => state.setIsSend)

  const tag = useTagStore((state) => state.tag)
  const isTagPressed = useTagStore((state) => state.isTagPressed)

  useEffect(() => {
    if (isQuerySend === false && isTagPressed === false && query === '' && tag === '') {
      setTrueLoading()
      paintingsApi.getPaintingsQuery(query, currentPage).then((res) => {
        setShortPaintings(res.data)
        if (res.pagination) {
          setTotalPages(res.pagination.total_pages)
          if (currentPage > res.pagination.total_pages) {
            setCurrentPage('1')
          }
        }
        if (res.data.length === 0) setFalseLoading()
      })
    }

    if (query !== '' && tag === '') {
      setTrueLoading()
      paintingsApi.getPaintingsQuery(query, currentPage).then((res) => {
        setShortPaintings(res.data)
        if (res.pagination) {
          setTotalPages(res.pagination.total_pages)
          if (currentPage > res.pagination.total_pages) {
            setCurrentPage('1')
          }
        }
        if (res.data.length === 0) setFalseLoading()
      })
    }

    return () => {}
  }, [currentPage, isQuerySend])

  useEffect(() => {
    // для работы с тэгами
    if (tag !== '') {
      setTrueLoading()
      paintingsApi.postPaintingsStyle(tag, currentPage).then((res) => {
        setShortPaintings(res.data)
        if (res.pagination) {
          setTotalPages(res.pagination.total_pages)
          if (currentPage > res.pagination.total_pages) {
            setCurrentPage('1')
          }
        }
        if (res.data.length === 0) setFalseLoading()
      })
      return () => {}
    }
  }, [tag, currentPage])

  useEffect(() => {
    // для запросов конкретным картинам
    if (shortPaintings.length > 1) {
      setTrueLoading()
      const ids = shortPaintings.map((queryPainting) => queryPainting.id)
      const request = ids.map((id) => paintingsApi.getPainting(id))
      Promise.all(request).then((res) => {
        const paintings = res.map((responsiveData) => responsiveData.data)
        setFullPaintings(paintings)
        setFalseLoading()
      })
    }
  }, [shortPaintings])

  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(event.target.value)
  }

  const handleQueryClick = (e: React.SyntheticEvent) => {
    // вынести логику в компонент
    e.preventDefault()
    setIsQuerySend(!isQuerySend)
  }

  return (
    <>
      <Head>
        <title>Art App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.home_page}>
        <div className={styles.container}>
          <div className={styles.title}>
            <h1 className={styles.title1}>Find your favourite paintings here</h1>
          </div>
          <div className={styles.tools}>
            <div className={styles.search_bar}>
              <SearchBar
                handleQueryChange={handleQueryChange}
                handleQueryClick={handleQueryClick}
                textFieldBackgroundColor="white"
                buttonBackgroundColor="black"
                searchBarLength="180"
                placeholder="Keywords"
                formClass={styles.search_bar_form}
                inputClass={styles.search_bar_input}
                buttonClass={styles.search_bar_button}
              />
            </div>
          </div>
          <div className={styles.tags}>
            <TagContainer />
          </div>
          {isLoading ? (
            <Loading />
          ) : fullPaintings[0] ? (
            <div className={styles.collage}>
              <Collage paintings={fullPaintings} />
            </div>
          ) : (
            <></>
          )}
          {Number(totalPages) > 1 ? (
            <div className={styles.page_controller}>
              <PageController page={currentPage} setPage={setCurrentPage} totalPages={totalPages} />
            </div>
          ) : (
            <></>
          )}
        </div>
      </main>
    </>
  )
}
